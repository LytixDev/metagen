--- SOURCE ---
func fib(n: s32): s32
begin
    if n = 0 then return 0
    if n = 1 then return 1
    return fib(n - 1) + fib(n - 2)
end

func main(): s32
begin
    var fib_5: s32, fib_6: s32, fib_7: s32
    fib_5 := @eval(fib(5))
    fib_6 := @eval(fib(6))
    fib_7 := fib_5 + fib_6
    print fib_7
    return 0
end
--- TREE ---
AST_ROOT
 AST_LIST
 AST_LIST
  AST_FUNC name=fib parameters=n: s32
   STMT_BLOCK vars=
    AST_LIST
     STMT_IF
      EXPR_BINARY
       op: EQ
       EXPR_LITERAL n
       EXPR_LITERAL 0
      STMT_RETURN
       EXPR_LITERAL 0
     STMT_IF
      EXPR_BINARY
       op: EQ
       EXPR_LITERAL n
       EXPR_LITERAL 1
      STMT_RETURN
       EXPR_LITERAL 1
     STMT_RETURN
      EXPR_BINARY
       op: PLUS
       EXPR_CALL fib
        AST_LIST
         EXPR_BINARY
          op: MINUS
          EXPR_LITERAL n
          EXPR_LITERAL 1
       EXPR_CALL fib
        AST_LIST
         EXPR_BINARY
          op: MINUS
          EXPR_LITERAL n
          EXPR_LITERAL 2
  AST_FUNC name=main parameters=
   STMT_BLOCK vars=fib_5: s32, fib_6: s32, fib_7: s32
    AST_LIST
     STMT_ASSIGNMENT
      EXPR_LITERAL fib_5
      EXPR_CALL @eval
       AST_LIST
        EXPR_CALL fib
         AST_LIST
          EXPR_LITERAL 5
     STMT_ASSIGNMENT
      EXPR_LITERAL fib_6
      EXPR_CALL @eval
       AST_LIST
        EXPR_CALL fib
         AST_LIST
          EXPR_LITERAL 6
     STMT_ASSIGNMENT
      EXPR_LITERAL fib_7
      EXPR_BINARY
       op: PLUS
       EXPR_LITERAL fib_5
       EXPR_LITERAL fib_6
     STMT_PRINT
      EXPR_LITERAL fib_7
     STMT_RETURN
      EXPR_LITERAL 0
 AST_LIST
 AST_LIST
 AST_LIST
  EXPR_CALL @eval
   AST_LIST
    EXPR_CALL fib
     AST_LIST
      EXPR_LITERAL 5
  EXPR_CALL @eval
   AST_LIST
    EXPR_CALL fib
     AST_LIST
      EXPR_LITERAL 6
--- OUTPUT ---
13
