import "ast" // Gives access to ast.c and ast.h
// @import("ast")

func PrintFunc(node: ast.Node): ast.Node
begin
    if node.type != ast.Func
        return node

    func_node: ast.Func = ast.as_func(node)
    func_name  := func_node.name
    func_stmts := func_node.stms
    
    // TODO: instead, the expr could be "Calling `func_name`"
    print_expr: ast.Expr  = ast.make_literal(func_name.token)
    print_node: ast.Print = ast.make_single(ast.STMT_PRINT, print_expr)

    func_node.stmts = ast.list_prepend(func_stmts, print_node)
    return ast.as_node(func_node)
end


@PrintFunc
func add(a: int, b: int): int
begin
    return a + b
end

func main() 
begin
    print add(40, 2)
end
